<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Win10下如何安装Scrapy]]></title>
      <url>http://zhugezuo.xyz/2016/09/07/Win10%E4%B8%8B%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Scrapy/</url>
      <content type="html"><![CDATA[<h1 id="安装介绍"><a href="#安装介绍" class="headerlink" title="安装介绍"></a>安装介绍</h1><p>Windows下部署Scrapy比较麻烦，需要装很多依赖包，Scrapy目前只支持到Python27，我的操作系统是Windows10，64位，下面就来详细介绍一下如何在WIN10下安装Scrapy</p>
<h1 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h1><p>Windows下，安装Scrapy前需要先安装以下依赖包：</p>
<ul>
<li><em>lxml:</em> <a href="https://pypi.python.org/pypi/lxml/3.6.0" target="_blank" rel="external">下载地址</a><br>根据操作系统选择<a href="https://pypi.python.org/packages/be/80/1d8839496d83ef5e90d63af215730785b8b8ce00d43c64960662adb92ecc/lxml-3.6.0.win-amd64-py2.7.exe#md5=ff6fc39c647241afe7f31490c5b7a61c" target="_blank" rel="external">lxml-3.6.0.win-amd64-py2.7.exe</a></li>
<li><em>pywin32:</em> <a href="https://sourceforge.net/projects/pywin32/files/pywin32/Build%20220" target="_blank" rel="external">下载地址</a><br>根据操作系统选择<a href="http://downloads.sourceforge.net/project/pywin32/pywin32/Build%20220/pywin32-220.win-amd64-py2.7.exe?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fpywin32%2Ffiles%2Fpywin32%2FBuild%2520220%2F&amp;ts=1473259515&amp;use_mirror=nchc" target="_blank" rel="external">pywin32-220.win-amd64-py2.7.exe</a></li>
<li><em>Twisted:</em> <a href="https://twistedmatrix.com/Releases/Twisted/15.4/" target="_blank" rel="external">下载地址</a><br>根据操作系统选择<a href="https://twistedmatrix.com/Releases/Twisted/15.4/Twisted-15.4.0.win-amd64-py2.7.exe" target="_blank" rel="external">Twisted-15.4.0.win-amd64-py2.7.exe</a></li>
</ul>
<p>下面的<em>pyOpenSSL</em>和<em>zope.interface</em>是<em>Twisted</em>的依赖包，可以自动安装，如果失败，再手动下载安装</p>
<ul>
<li><em>pyOpenSSL:</em> <a href="https://pypi.python.org/pypi/pyOpenSSL/0.13.1" target="_blank" rel="external">下载地址</a><br>根据操作系统选择<a href="https://pypi.python.org/packages/a9/3f/65276ba1b19cbd678a3f3876cd7fa739fd9fd23e2f87f08668e701b9cb60/pyOpenSSL-0.13.1.win-amd64-py2.7.exe#md5=223cc4ab7439818ccaf1bf7f51736dc8" target="_blank" rel="external">pyOpenSSL-0.13.1.win-amd64-py2.7.exe</a></li>
<li><em>zope.interface:</em> <a href="https://pypi.python.org/pypi/zope.interface/4.3.2" target="_blank" rel="external">下载地址</a><br>根据操作系统选择<a href="https://pypi.python.org/packages/d7/54/3e2c6ed5eee78d0929edb8982188632d75e1b09d3cc19395f04d26ef5da6/zope.interface-4.3.2.win-amd64-py2.7.exe#md5=9c4c19d72a3f8857c223e60dbc32c301" target="_blank" rel="external">zope.interface-4.3.2.win-amd64-py2.7.exe</a></li>
</ul>
<h1 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h1><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install Scrapy</div></pre></td></tr></table></figure></p>
<h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy version</div></pre></td></tr></table></figure></p>
<p>能够看到Scrapy版本就表示安装完成了<br><img src="http://i2.buimg.com/567571/d1b2d00b3d6fdf46.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何实现python2和python3的共存]]></title>
      <url>http://zhugezuo.xyz/2016/09/06/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0python2%E5%92%8Cpython3%E7%9A%84%E5%85%B1%E5%AD%98/</url>
      <content type="html"><![CDATA[<p>大家都知道，目前python有2.x版本和3.x版本，python3相比python2有很大的改进，很多人都会选择python3入门，但是由于很多环境自带的都是python2，而且很多库也只支持python2，所以我们经常会在python2和python3上跑不同的程序。下面就来介绍如何在同一台电脑上安装python2和python3，并且相互独立。<br><a id="more"></a></p>
<h1 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h1><h2 id="python的共存"><a href="#python的共存" class="headerlink" title="python的共存"></a>python的共存</h2><ol>
<li>首先去<a href="https://www.python.org/downloads/" target="_blank" rel="external">官网</a>下载并安装python2和python3。</li>
<li>将两个安装路径以及路径下的Scripts目录都添加进环境变量PATH中：</li>
</ol>
<blockquote>
<p>;C:\Python3\Scripts\;C:\Python3\;C:\Python2\Scripts\;C:\Python2\</p>
</blockquote>
<ol>
<li>将Python2目录下的python.exe修改为python2.exe</li>
<li>分别执行python和python2即可启动相应版本的python<br><img src="http://i1.piimg.com/567571/ab25d1f04ce48a1f.png" alt=""></li>
</ol>
<h2 id="pip的共存"><a href="#pip的共存" class="headerlink" title="pip的共存"></a>pip的共存</h2><p>pip是python的包管理工具，两个python版本需要有相应的pip，安装好python之后，由于修改了exe的文件名，执行pip时会报错</p>
<blockquote>
<p>Fatal error in launcher: Unable to create process using ‘“‘</p>
</blockquote>
<p>修复方法：</p>
<ol>
<li><p>分别执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python -m pip install pip --upgrade</div><div class="line">python2 -m pip install pip --upgrade</div></pre></td></tr></table></figure>
</li>
<li><p>删除python2\Scripts目录下的pip.exe，保留pip2.exe</p>
</li>
<li>分别用pip和pip2命令管理两个版本的包<br><img src="http://i4.buimg.com/567571/edc1ba4b105538a6.png" alt=""></li>
</ol>
<h1 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h1><h2 id="python的共存-1"><a href="#python的共存-1" class="headerlink" title="python的共存"></a>python的共存</h2><p>由于我使用的是CentOS，系统自带了python2，所以只要再安装python3就可以了.</p>
<ol>
<li><p>下载最新的python3源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz</div></pre></td></tr></table></figure>
</li>
<li><p>解压并进入文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf Python-3.5.2.tgz</div></pre></td></tr></table></figure>
</li>
<li><p>编译安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/python3</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>新建连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python3</div></pre></td></tr></table></figure>
</li>
<li><p>分别执行python和python3可以进入启动相应版本的python<br><img src="http://i4.buimg.com/567571/faf440965cea57be.png" alt=""></p>
</li>
</ol>
<h2 id="pip的共存-1"><a href="#pip的共存-1" class="headerlink" title="pip的共存"></a>pip的共存</h2><ol>
<li><p>建立pip3的软连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</div></pre></td></tr></table></figure>
</li>
<li><p>分别用pip和pip3命令管理两个版本的包<br><img src="http://i4.buimg.com/567571/9b7a7544c7038b64.png" alt=""></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Challenge (Level 6-10)]]></title>
      <url>http://zhugezuo.xyz/2016/09/04/Python-Challenge-Level-6-10/</url>
      <content type="html"><![CDATA[<h1 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a><a href="http://www.pythonchallenge.com/pc/def/channel.html" target="_blank" rel="external">第6关</a></h1><p>查看网页源码获得提示“zip”，试着替换网址中的“html”，发现果然可以下载。下载后打开里面的readme.txt，获得两个提示：</p>
<ul>
<li>hint1: start from 90052</li>
<li>hint2: answer is inside the zip</li>
</ul>
<a id="more"></a>
<p>打开90052.txt获得下个提示“Next nothing is 94191”，和第4关一样的方法继续找下去，得到结果“Collect the comments.”。根据这个提示，依次获得文件的comment()属性并打印:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re,zipfile</div><div class="line">z = zipfile.ZipFile(<span class="string">'channel.zip'</span>, <span class="string">'r'</span>)</div><div class="line">num = <span class="number">90052</span></div><div class="line">c = z.getinfo(<span class="string">'%s.txt'</span> % num).comment.decode(<span class="string">'utf8'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">    text = z.read(<span class="string">'%s.txt'</span> % num).decode(<span class="string">'utf8'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        num = re.search(<span class="string">'Next nothing is ([0-9]*)'</span>,text).group(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    c = z.getinfo(<span class="string">'%s.txt'</span> % num).comment.decode(<span class="string">'utf8'</span>)</div><div class="line">    print(c, end=<span class="string">''</span>)</div></pre></td></tr></table></figure>
<p>打印结果：<br><img src="http://i2.buimg.com/567571/ce2ab8aee019488b.png" alt=""><br>老方法，网址中的“channel”替换为“hockey”，得到提示“it’s in the air. look at the letters.”，注意组成字母“HOCKEY”的小字母分别为O,X,Y,G,E,N，坑爹呢这是！不愧是解谜网站，哈哈。最终，得到下一关地址：<a href="http://www.pythonchallenge.com/pc/def/oxygen.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/oxygen.html</a></p>
<h1 id="第7关"><a href="#第7关" class="headerlink" title="第7关"></a><a href="http://www.pythonchallenge.com/pc/def/oxygen.html" target="_blank" rel="external">第7关</a></h1><p>可以看到图片中有一段灰度条，猜测需要用到图片处理模块。取图片的RGBA，发现灰度条（R=G=B）范围为：w:0-607,h:43-51，RGB数值7个一组，猜测为ASCII值，进行转化：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> io</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">img = urllib.request.urlopen(</div><div class="line">    <span class="string">'http://www.pythonchallenge.com/pc/def/oxygen.png'</span>).read()</div><div class="line">im = Image.open(io.BytesIO(img))</div><div class="line">w, h = <span class="number">607</span>, <span class="number">50</span> 		 <span class="comment"># 取w:0-607,h=50的线段进行处理</span></div><div class="line">print(<span class="string">''</span>.join([chr(im.getpixel((i, h))[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, w, <span class="number">7</span>)]))</div></pre></td></tr></table></figure>
<p>获得提示：“smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]”，再次根据ASCII码转化为字符，得到下一关地址：<a href="http://www.pythonchallenge.com/pc/def/integrity.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/integrity.html</a></p>
<h1 id="第8关"><a href="#第8关" class="headerlink" title="第8关"></a><a href="">第8关</a></h1><p>点击图上的蜜蜂发现要输入用户名和密码，查看网页源码发现下面有提示：</p>
<blockquote>
<p>un: ‘BZh91AY…’<br>pw: ‘BZh91AY…’</p>
</blockquote>
<p>看来是需要转换呀，怎么做呢？可以观察到两串字符都是以’BZh…’开头的，应该是bz2压缩后的结果，那么直接进行解压缩看看：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> bz2</div><div class="line">un = <span class="string">b'BZh91AY...'</span></div><div class="line">pw = <span class="string">b'BZh91AY...'</span></div><div class="line">print(bz2.decompress(un),bz2.decompress(pw))</div></pre></td></tr></table></figure>
<p>点击图中的蜜蜂，输入运行的结果，用户名：<strong>huge</strong>，密码：<strong>file</strong></p>
<h1 id="第9关"><a href="#第9关" class="headerlink" title="第9关"></a><a href="http://www.pythonchallenge.com/pc/return/good.html" target="_blank" rel="external">第9关</a></h1><p>图中黑点描出这棵树的轮廓，又看到网页源码中给了两串数字，是什么意思呢？猜测应该是坐标，试着根据这两串坐标绘图：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</div><div class="line">first = [<span class="number">146</span>,<span class="number">399</span>,<span class="number">163</span>,...]</div><div class="line">second = [<span class="number">156</span>,<span class="number">141</span>,<span class="number">165</span>,...]</div><div class="line">newIm = Image.new(<span class="string">'L'</span>, (<span class="number">800</span>,<span class="number">800</span>))  <span class="comment">#新建800*800的背景图</span></div><div class="line">draw = ImageDraw.Draw(newIm)</div><div class="line">draw.line(first, fill=<span class="number">255</span>)</div><div class="line">draw.line(second, fill=<span class="number">255</span>)</div><div class="line">newIm.show()</div></pre></td></tr></table></figure>
<p>打印图像，是一头公牛（bull）<br><img src="http://i2.buimg.com/567571/0cf2ad06cf30292d.jpg" alt=""><br>得到下一关地址：<a href="http://www.pythonchallenge.com/pc/return/bull.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/return/bull.html</a></p>
<h1 id="第10关"><a href="#第10关" class="headerlink" title="第10关"></a><a href="http://www.pythonchallenge.com/pc/return/bull.html" target="_blank" rel="external">第10关</a></h1><p>图片下方写着“len(a[30]) = ?”，点击图中的公牛，获得提示“a = [1, 11, 21, 1211, 111221, ”看来是一道找规律的题目。仔细看，后一个数字是在描述前一个数字，比如第二项11表示前一项是1个1，第三项21表示前一项是2个1，第四项1211表示前一项是1个2加上1个1，依此类推。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="comment"># 定义一个函数，先用正则表达式分割出相同的数字块，然后组成下一个数字</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(a)</span>:</span></div><div class="line">    sets = re.findall(<span class="string">"(1+|2+|3+|4+|5+|6+|7+|8+|9+|0+)"</span>, a)</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([str(len(x)) + x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> sets])</div><div class="line">a = <span class="string">'1'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</div><div class="line">    a = describe(a)</div><div class="line">print(len(a))</div></pre></td></tr></table></figure>
<p>最后结果是5808，得到下一关地址：<a href="http://www.pythonchallenge.com/pc/return/5808.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/return/5808.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python Challenge (Level 0-5)]]></title>
      <url>http://zhugezuo.xyz/2016/09/04/Python-Challenge-Level-0-5/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python Challenge是一个过关式的解谜站点，使用的是经典在线解谜站点Not Pr0n的模式：根据提示找出下一关的网页地址。和Not Pr0n不同的是，在每一关里你都需要编写程序来寻找答案。虽然这个解谜站点的名字叫做Python Challenge，但事实上你可以使用任意一种程序语言（除了少数一两关可能会用到点Python的知识），目前总共有33关。<br><strong>挑战地址:</strong> <a href="http://www.pythonchallenge.com/" target="_blank" rel="external">Python Challenge</a><br><a id="more"></a></p>
<h1 id="第0关"><a href="#第0关" class="headerlink" title="第0关"></a><a href="http://www.pythonchallenge.com/pc/def/0.html" target="_blank" rel="external">第0关</a></h1><p>图片上面写着2<sup>38</sup>，用python可以轻松求解，结果为：274877906944。替换掉地址栏的0，得到下一关地址:<br><a href="http://www.pythonchallenge.com/pc/def/274877906944.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/274877906944.html</a></p>
<h1 id="第1关"><a href="#第1关" class="headerlink" title="第1关"></a><a href="http://www.pythonchallenge.com/pc/def/274877906944.html" target="_blank" rel="external">第1关</a></h1><p>从图中的<strong>K-&gt;M</strong>,<strong>O-&gt;Q</strong>,<strong>E-&gt;G</strong> 容易看出，把字母往后加二得到相应的字母，Y和Z应该是分别对应A和B。接下来对网页下方的字符串进行处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> string</div><div class="line">text = <span class="string">"# 省略字符串"</span></div><div class="line">table = text.maketrans(string.ascii_lowercase,string.ascii_lowercase[<span class="number">2</span>:]+string.ascii_lowercase[:<span class="number">2</span>])</div><div class="line">print(text.translate(table))</div></pre></td></tr></table></figure>
<p>在上面的代码中，我们用到了maketrans()方法创建字符映射的转换表，对字符串进行处理，maketrans()方法语法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.maketrans(intab, outtab)</div></pre></td></tr></table></figure>
<p><strong>intab</strong> – 字符串中要替代的字符组成的字符串。<br><strong>outtab</strong> – 相应的映射字符的字符串。<br>上述代码的打印结果为“i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that’s why this text is so long. using string.maketrans() is recommended. now apply on the url.”<br>再对地址栏中的”map”进行转换，得到下一关地址：<a href="http://www.pythonchallenge.com/pc/def/ocr.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/ocr.html</a></p>
<h1 id="第2关"><a href="#第2关" class="headerlink" title="第2关"></a><a href="http://www.pythonchallenge.com/pc/def/ocr.html" target="_blank" rel="external">第2关</a></h1><p>题目提示“MAYBE they are in the page source”。那么我们右键查看网页源码，注释中指出“find rare characters in the mess below”，让我们找出出现次数较少的字符，那就直接数出每个字符的出现次数并排序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"""</span></div><div class="line"># 省略字符串</div><div class="line">"""</div><div class="line">s = set(str)</div><div class="line">d = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">    d[i]=str.count(i)</div><div class="line">print(sorted(d.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]))</div></pre></td></tr></table></figure>
<p>可以看出出现次数最少的字母为q,t,a,y,e,i,u,l，正好可以拼出单词“equality”，得到下一关地址：<a href="http://www.pythonchallenge.com/pc/def/equality.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/equality.html</a></p>
<h1 id="第3关"><a href="#第3关" class="headerlink" title="第3关"></a><a href="http://www.pythonchallenge.com/pc/def/equality.html" target="_blank" rel="external">第3关</a></h1><p>题目强调了“EXACTLY”，一个小写字母被<strong>正好</strong>三个大写字母包围，不能多也不能少，依旧是查看网页源码获得字符串，可以用正则表达式进行匹配：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">text = <span class="string">"""</span></div><div class="line"># 省略字符串</div><div class="line">"""</div><div class="line">print(<span class="string">""</span>.join(re.findall(<span class="string">'[^A-Z][A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]'</span>, text)))</div></pre></td></tr></table></figure>
<p>这里用到了正则表达式，可以在<a href="http://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="external">菜鸟教程</a>学习<br>执行结果为：linkedlist，得到下一关地址：<a href="http://www.pythonchallenge.com/pc/def/linkedlist.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/linkedlist.html</a></p>
<h1 id="第4关"><a href="#第4关" class="headerlink" title="第4关"></a><a href="http://www.pythonchallenge.com/pc/def/linkedlist.html" target="_blank" rel="external">第4关</a></h1><p>将网址上的”.html”改为”.php”，点击图片得到提示“and the next nothing is 44827”，将网址中的”12345”替换为“44827”，很明显，是让你一路替换下去。什么时候停止呢？源码中提示“400 times is more than enough”。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"><span class="keyword">import</span> re</div><div class="line">num = <span class="number">12345</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">400</span>):</div><div class="line">    u = request.urlopen(<span class="string">'http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%s'</span>% num)</div><div class="line">    text = u.read().decode(<span class="string">'utf8'</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        num = re.search(<span class="string">'and the next nothing is ([0-9]*)'</span>,text).group(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(text)</div><div class="line">        <span class="keyword">break</span></div><div class="line">    print(num)</div></pre></td></tr></table></figure>
<p>执行得到数字“16044”，页面上提示“Yes. Divide by two and keep going”，将上面的”12345”替换为”8022”继续执行，得到下一关地址：<a href="http://www.pythonchallenge.com/pc/def/peak.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/peak.html</a><br><strong>注意：</strong>我使用的是python3，如果是python2，用法略有不同，具体请自行搜索</p>
<h1 id="第5关"><a href="#第5关" class="headerlink" title="第5关"></a><a href="http://www.pythonchallenge.com/pc/def/peak.html" target="_blank" rel="external">第5关</a></h1><p>提示：”pronounce it”，“peak hell”读音像什么呢？像python自带的模块pickle，那么就用pickle处理<a href="http://www.pythonchallenge.com/pc/def/banner.p" target="_blank" rel="external">banner.p</a>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pickle</div><div class="line">text = <span class="string">"""</span></div><div class="line"># 省略字符串</div><div class="line">"""</div><div class="line">data = pickle.loads(text.encode(<span class="string">'utf8'</span>))</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</div><div class="line">    print(<span class="string">''</span>.join(map(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] * x[<span class="number">1</span>], line)))</div></pre></td></tr></table></figure>
<p>先用pickle模块获取到列表[[(‘ ‘, 95)], [(‘ ‘, 14), (‘#’, 5), ···]，很明显数字表示前面字母的重复次数，按照该列表进行绘图如下：<br><img src="http://i2.buimg.com/567571/c23a3e912ec342fb.png" alt=""><br>拼出了单词“channel”，得到下一关地址：<a href="http://www.pythonchallenge.com/pc/def/channel.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/channel.html</a></p>
]]></content>
    </entry>
    
  
  
</search>
